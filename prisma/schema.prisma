// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   name           String?   @unique
//   email          String?   @unique
//   emailVerified  DateTime?
//   image          String?
//   hashedPassword String?
//   created        DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt
//   favoriteIds    String[]  @db.ObjectId

//   acounts      Account[]
//   listing      Listing[]
//   reservations Reservation[]
// }

// model Account {
//   id               String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId           String  @db.ObjectId
//   type             String
//   provider         String
//   providerAccontId String
//   refresh_token    String? @db.String
//   access_token     String? @db.String
//   expires_at       Int?
//   token_type       String?
//   scope            String?
//   id_token         String? @db.String
//   session_state    String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccontId])
// }

// model Listing {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   title         String
//   description   String
//   imageSrc      String
//   createdAt     DateTime @default(now())
//   category      String
//   roomCount     Int
//   bathroomCount Int
//   guestCount    Int
//   locationValue String
//   userId        String   @db.ObjectId
//   price         Int

//   user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
//   reservations Reservation[]
// }

// model Reservation {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId     String   @db.ObjectId
//   listingId  String   @db.ObjectId
//   startDate  DateTime
//   endDate    DateTime
//   totalPrice Int
//   createdAt  DateTime @default(now())

//   user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
// }

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  created        DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts     Account[] // Fixed Typo
  listings     Listing[] // It is better to make this plural for clarity
  reservations Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String // Fixed Typo
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  userId        String   @db.ObjectId
  price         Int

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
